// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="finn_rtl_krnl_final,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.589600,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2405,HLS_SYN_LUT=698,HLS_VERSION=2020_1}" *)

module finn_rtl_krnl_final (
        ap_clk,
        ap_rst_n,
        axis00_TDATA,
        axis00_TVALID,
        axis00_TREADY,
        axis00_TKEEP,
        axis00_TLAST,
        axis01_TDATA,
        axis01_TVALID,
        axis01_TREADY,
        axis01_TKEEP,
        axis01_TLAST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [255:0] axis00_TDATA;
output   axis00_TVALID;
input   axis00_TREADY;
output  [31:0] axis00_TKEEP;
output  [0:0] axis00_TLAST;
input  [31:0] axis01_TDATA;
input   axis01_TVALID;
output   axis01_TREADY;
input  [3:0] axis01_TKEEP;
input  [0:0] axis01_TLAST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

reg axis01_TREADY;

(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_n_inv;
wire    grp_example_stream_plus1_32_256_s_fu_38_ap_start;
wire    grp_example_stream_plus1_32_256_s_fu_38_ap_done;
wire    grp_example_stream_plus1_32_256_s_fu_38_ap_idle;
wire    grp_example_stream_plus1_32_256_s_fu_38_ap_ready;
wire    grp_example_stream_plus1_32_256_s_fu_38_axis01_TREADY;
wire   [255:0] grp_example_stream_plus1_32_256_s_fu_38_axis00_TDATA;
wire    grp_example_stream_plus1_32_256_s_fu_38_axis00_TVALID;
wire    grp_example_stream_plus1_32_256_s_fu_38_axis00_TREADY;
wire   [31:0] grp_example_stream_plus1_32_256_s_fu_38_axis00_TKEEP;
wire   [0:0] grp_example_stream_plus1_32_256_s_fu_38_axis00_TLAST;
reg    grp_example_stream_plus1_32_256_s_fu_38_ap_start_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg   [3:0] ap_NS_fsm;
wire    ap_CS_fsm_state4;
wire    regslice_both_axis00_V_data_V_U_apdone_blk;
wire    axis00_TREADY_int;
wire    regslice_both_axis00_V_data_V_U_vld_out;
wire    regslice_both_axis00_V_keep_V_U_apdone_blk;
wire    regslice_both_axis00_V_keep_V_U_ack_in_dummy;
wire    regslice_both_axis00_V_keep_V_U_vld_out;
wire    regslice_both_axis00_V_last_V_U_apdone_blk;
wire    regslice_both_axis00_V_last_V_U_ack_in_dummy;
wire    regslice_both_axis00_V_last_V_U_vld_out;
wire    regslice_both_axis01_V_data_V_U_apdone_blk;
wire   [31:0] axis01_TDATA_int;
wire    axis01_TVALID_int;
reg    axis01_TREADY_int;
wire    regslice_both_axis01_V_data_V_U_ack_in;
wire    regslice_both_axis01_V_keep_V_U_apdone_blk;
wire   [3:0] axis01_TKEEP_int;
wire    regslice_both_axis01_V_keep_V_U_vld_out;
wire    regslice_both_axis01_V_keep_V_U_ack_in;
wire    regslice_both_axis01_V_last_V_U_apdone_blk;
wire   [0:0] axis01_TLAST_int;
wire    regslice_both_axis01_V_last_V_U_vld_out;
wire    regslice_both_axis01_V_last_V_U_ack_in;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b1;
#0 ap_rst_reg_1 = 1'b1;
#0 ap_rst_n_inv = 1'b1;
#0 grp_example_stream_plus1_32_256_s_fu_38_ap_start_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
end

finn_rtl_krnl_final_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
finn_rtl_krnl_final_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1)
);

example_stream_plus1_32_256_s grp_example_stream_plus1_32_256_s_fu_38(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_example_stream_plus1_32_256_s_fu_38_ap_start),
    .ap_done(grp_example_stream_plus1_32_256_s_fu_38_ap_done),
    .ap_idle(grp_example_stream_plus1_32_256_s_fu_38_ap_idle),
    .ap_ready(grp_example_stream_plus1_32_256_s_fu_38_ap_ready),
    .axis01_TDATA(axis01_TDATA_int),
    .axis01_TVALID(axis01_TVALID_int),
    .axis01_TREADY(grp_example_stream_plus1_32_256_s_fu_38_axis01_TREADY),
    .axis01_TKEEP(axis01_TKEEP_int),
    .axis01_TLAST(axis01_TLAST_int),
    .axis00_TDATA(grp_example_stream_plus1_32_256_s_fu_38_axis00_TDATA),
    .axis00_TVALID(grp_example_stream_plus1_32_256_s_fu_38_axis00_TVALID),
    .axis00_TREADY(grp_example_stream_plus1_32_256_s_fu_38_axis00_TREADY),
    .axis00_TKEEP(grp_example_stream_plus1_32_256_s_fu_38_axis00_TKEEP),
    .axis00_TLAST(grp_example_stream_plus1_32_256_s_fu_38_axis00_TLAST)
);

regslice_both #(
    .DataWidth( 256 ))
regslice_both_axis00_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_example_stream_plus1_32_256_s_fu_38_axis00_TDATA),
    .vld_in(grp_example_stream_plus1_32_256_s_fu_38_axis00_TVALID),
    .ack_in(axis00_TREADY_int),
    .data_out(axis00_TDATA),
    .vld_out(regslice_both_axis00_V_data_V_U_vld_out),
    .ack_out(axis00_TREADY),
    .apdone_blk(regslice_both_axis00_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_axis00_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_example_stream_plus1_32_256_s_fu_38_axis00_TKEEP),
    .vld_in(grp_example_stream_plus1_32_256_s_fu_38_axis00_TVALID),
    .ack_in(regslice_both_axis00_V_keep_V_U_ack_in_dummy),
    .data_out(axis00_TKEEP),
    .vld_out(regslice_both_axis00_V_keep_V_U_vld_out),
    .ack_out(axis00_TREADY),
    .apdone_blk(regslice_both_axis00_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_axis00_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_example_stream_plus1_32_256_s_fu_38_axis00_TLAST),
    .vld_in(grp_example_stream_plus1_32_256_s_fu_38_axis00_TVALID),
    .ack_in(regslice_both_axis00_V_last_V_U_ack_in_dummy),
    .data_out(axis00_TLAST),
    .vld_out(regslice_both_axis00_V_last_V_U_vld_out),
    .ack_out(axis00_TREADY),
    .apdone_blk(regslice_both_axis00_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_axis01_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(axis01_TDATA),
    .vld_in(axis01_TVALID),
    .ack_in(regslice_both_axis01_V_data_V_U_ack_in),
    .data_out(axis01_TDATA_int),
    .vld_out(axis01_TVALID_int),
    .ack_out(axis01_TREADY_int),
    .apdone_blk(regslice_both_axis01_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 4 ))
regslice_both_axis01_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(axis01_TKEEP),
    .vld_in(axis01_TVALID),
    .ack_in(regslice_both_axis01_V_keep_V_U_ack_in),
    .data_out(axis01_TKEEP_int),
    .vld_out(regslice_both_axis01_V_keep_V_U_vld_out),
    .ack_out(axis01_TREADY_int),
    .apdone_blk(regslice_both_axis01_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_axis01_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(axis01_TLAST),
    .vld_in(axis01_TVALID),
    .ack_in(regslice_both_axis01_V_last_V_U_ack_in),
    .data_out(axis01_TLAST_int),
    .vld_out(regslice_both_axis01_V_last_V_U_vld_out),
    .ack_out(axis01_TREADY_int),
    .apdone_blk(regslice_both_axis01_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_example_stream_plus1_32_256_s_fu_38_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_example_stream_plus1_32_256_s_fu_38_ap_start_reg <= 1'b1;
        end else if ((grp_example_stream_plus1_32_256_s_fu_38_ap_ready == 1'b1)) begin
            grp_example_stream_plus1_32_256_s_fu_38_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ap_rst_reg_1;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_1 <= ap_rst_reg_2;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_2 <= ~ap_rst_n;
end

always @ (*) begin
    if (((axis01_TVALID == 1'b1) & (regslice_both_axis01_V_data_V_U_ack_in == 1'b1))) begin
        axis01_TREADY = 1'b1;
    end else begin
        axis01_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        axis01_TREADY_int = grp_example_stream_plus1_32_256_s_fu_38_axis01_TREADY;
    end else begin
        axis01_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_example_stream_plus1_32_256_s_fu_38_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (regslice_both_axis00_V_data_V_U_apdone_blk == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign axis00_TVALID = regslice_both_axis00_V_data_V_U_vld_out;

assign grp_example_stream_plus1_32_256_s_fu_38_ap_start = grp_example_stream_plus1_32_256_s_fu_38_ap_start_reg;

assign grp_example_stream_plus1_32_256_s_fu_38_axis00_TREADY = (axis00_TREADY_int & ap_CS_fsm_state3);

endmodule //finn_rtl_krnl_final
