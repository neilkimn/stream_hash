// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _example_stream_plus1_32_256_s_HH_
#define _example_stream_plus1_32_256_s_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "read_stream_32_256_s.h"
#include "write_stream_256_256_s.h"

namespace ap_rtl {

struct example_stream_plus1_32_256_s : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > axis01_TDATA;
    sc_in< sc_logic > axis01_TVALID;
    sc_out< sc_logic > axis01_TREADY;
    sc_in< sc_lv<4> > axis01_TKEEP;
    sc_in< sc_lv<1> > axis01_TLAST;
    sc_out< sc_lv<256> > axis00_TDATA;
    sc_out< sc_logic > axis00_TVALID;
    sc_in< sc_logic > axis00_TREADY;
    sc_out< sc_lv<32> > axis00_TKEEP;
    sc_out< sc_lv<1> > axis00_TLAST;


    // Module declarations
    example_stream_plus1_32_256_s(sc_module_name name);
    SC_HAS_PROCESS(example_stream_plus1_32_256_s);

    ~example_stream_plus1_32_256_s();

    sc_trace_file* mVcdFile;

    read_stream_32_256_s* grp_read_stream_32_256_s_fu_70;
    write_stream_256_256_s* call_ln100_write_stream_256_256_s_fu_81;
    sc_signal< sc_lv<11> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > grp_read_stream_32_256_s_fu_70_axis01_TDATA_blk_n;
    sc_signal< sc_logic > axis01_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_logic > call_ln100_write_stream_256_256_s_fu_81_axis00_TDATA_blk_n;
    sc_signal< sc_logic > axis00_TDATA_blk_n;
    sc_signal< sc_logic > grp_read_stream_32_256_s_fu_70_ap_start;
    sc_signal< sc_logic > grp_read_stream_32_256_s_fu_70_ap_done;
    sc_signal< sc_logic > grp_read_stream_32_256_s_fu_70_ap_idle;
    sc_signal< sc_logic > grp_read_stream_32_256_s_fu_70_ap_ready;
    sc_signal< sc_logic > grp_read_stream_32_256_s_fu_70_axis01_TREADY;
    sc_signal< sc_lv<256> > grp_read_stream_32_256_s_fu_70_ap_return_0;
    sc_signal< sc_lv<32> > grp_read_stream_32_256_s_fu_70_ap_return_1;
    sc_signal< sc_lv<1> > grp_read_stream_32_256_s_fu_70_ap_return_2;
    sc_signal< sc_logic > grp_read_stream_32_256_s_fu_70_ap_ce;
    sc_signal< bool > ap_block_state10;
    sc_signal< sc_logic > call_ln100_write_stream_256_256_s_fu_81_ap_start;
    sc_signal< sc_logic > call_ln100_write_stream_256_256_s_fu_81_ap_done;
    sc_signal< sc_logic > call_ln100_write_stream_256_256_s_fu_81_ap_idle;
    sc_signal< sc_logic > call_ln100_write_stream_256_256_s_fu_81_ap_ready;
    sc_signal< sc_lv<256> > call_ln100_write_stream_256_256_s_fu_81_acc_data_V_read;
    sc_signal< sc_lv<256> > call_ln100_write_stream_256_256_s_fu_81_axis00_TDATA;
    sc_signal< sc_logic > call_ln100_write_stream_256_256_s_fu_81_axis00_TVALID;
    sc_signal< sc_logic > call_ln100_write_stream_256_256_s_fu_81_axis00_TREADY;
    sc_signal< sc_lv<32> > call_ln100_write_stream_256_256_s_fu_81_axis00_TKEEP;
    sc_signal< sc_lv<1> > call_ln100_write_stream_256_256_s_fu_81_axis00_TLAST;
    sc_signal< sc_logic > call_ln100_write_stream_256_256_s_fu_81_ap_ce;
    sc_signal< sc_logic > grp_read_stream_32_256_s_fu_70_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<11> > ap_NS_fsm;
    sc_signal< sc_logic > ap_NS_fsm_state3;
    sc_signal< sc_lv<256> > acc_data_V_fu_234_p9;
    sc_signal< sc_lv<1> > acc_last_V_fu_107_p1;
    sc_signal< sc_lv<256> > acc_data_V_2_fu_66;
    sc_signal< sc_lv<32> > trunc_ln647_fu_112_p1;
    sc_signal< sc_lv<32> > p_Result_4_1_i_fu_122_p4;
    sc_signal< sc_lv<32> > p_Result_4_2_i_fu_138_p4;
    sc_signal< sc_lv<32> > p_Result_4_3_i_fu_154_p4;
    sc_signal< sc_lv<32> > p_Result_4_4_i_fu_170_p4;
    sc_signal< sc_lv<32> > p_Result_4_5_i_fu_186_p4;
    sc_signal< sc_lv<32> > p_Result_4_6_i_fu_202_p4;
    sc_signal< sc_lv<32> > p_Result_4_7_i_fu_218_p4;
    sc_signal< sc_lv<32> > add_ln215_7_fu_228_p2;
    sc_signal< sc_lv<32> > add_ln215_6_fu_212_p2;
    sc_signal< sc_lv<32> > add_ln215_5_fu_196_p2;
    sc_signal< sc_lv<32> > add_ln215_4_fu_180_p2;
    sc_signal< sc_lv<32> > add_ln215_3_fu_164_p2;
    sc_signal< sc_lv<32> > add_ln215_2_fu_148_p2;
    sc_signal< sc_lv<32> > add_ln215_1_fu_132_p2;
    sc_signal< sc_lv<32> > add_ln215_fu_116_p2;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<11> ap_ST_fsm_state1;
    static const sc_lv<11> ap_ST_fsm_state2;
    static const sc_lv<11> ap_ST_fsm_state3;
    static const sc_lv<11> ap_ST_fsm_state4;
    static const sc_lv<11> ap_ST_fsm_state5;
    static const sc_lv<11> ap_ST_fsm_state6;
    static const sc_lv<11> ap_ST_fsm_state7;
    static const sc_lv<11> ap_ST_fsm_state8;
    static const sc_lv<11> ap_ST_fsm_state9;
    static const sc_lv<11> ap_ST_fsm_state10;
    static const sc_lv<11> ap_ST_fsm_state11;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_20;
    static const sc_lv<32> ap_const_lv32_3F;
    static const sc_lv<32> ap_const_lv32_40;
    static const sc_lv<32> ap_const_lv32_5F;
    static const sc_lv<32> ap_const_lv32_60;
    static const sc_lv<32> ap_const_lv32_7F;
    static const sc_lv<32> ap_const_lv32_80;
    static const sc_lv<32> ap_const_lv32_9F;
    static const sc_lv<32> ap_const_lv32_A0;
    static const sc_lv<32> ap_const_lv32_BF;
    static const sc_lv<32> ap_const_lv32_C0;
    static const sc_lv<32> ap_const_lv32_DF;
    static const sc_lv<32> ap_const_lv32_E0;
    static const sc_lv<32> ap_const_lv32_FF;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_acc_data_V_fu_234_p9();
    void thread_acc_last_V_fu_107_p1();
    void thread_add_ln215_1_fu_132_p2();
    void thread_add_ln215_2_fu_148_p2();
    void thread_add_ln215_3_fu_164_p2();
    void thread_add_ln215_4_fu_180_p2();
    void thread_add_ln215_5_fu_196_p2();
    void thread_add_ln215_6_fu_212_p2();
    void thread_add_ln215_7_fu_228_p2();
    void thread_add_ln215_fu_116_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_NS_fsm_state3();
    void thread_ap_block_state10();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_axis00_TDATA();
    void thread_axis00_TDATA_blk_n();
    void thread_axis00_TKEEP();
    void thread_axis00_TLAST();
    void thread_axis00_TVALID();
    void thread_axis01_TDATA_blk_n();
    void thread_axis01_TREADY();
    void thread_call_ln100_write_stream_256_256_s_fu_81_acc_data_V_read();
    void thread_call_ln100_write_stream_256_256_s_fu_81_ap_ce();
    void thread_call_ln100_write_stream_256_256_s_fu_81_ap_start();
    void thread_call_ln100_write_stream_256_256_s_fu_81_axis00_TREADY();
    void thread_grp_read_stream_32_256_s_fu_70_ap_ce();
    void thread_grp_read_stream_32_256_s_fu_70_ap_start();
    void thread_p_Result_4_1_i_fu_122_p4();
    void thread_p_Result_4_2_i_fu_138_p4();
    void thread_p_Result_4_3_i_fu_154_p4();
    void thread_p_Result_4_4_i_fu_170_p4();
    void thread_p_Result_4_5_i_fu_186_p4();
    void thread_p_Result_4_6_i_fu_202_p4();
    void thread_p_Result_4_7_i_fu_218_p4();
    void thread_trunc_ln647_fu_112_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
