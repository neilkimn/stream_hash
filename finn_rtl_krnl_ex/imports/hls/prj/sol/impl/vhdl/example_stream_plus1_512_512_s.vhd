-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity example_stream_plus1_512_512_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    axis01_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    axis01_TVALID : IN STD_LOGIC;
    axis01_TREADY : OUT STD_LOGIC;
    axis01_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
    axis01_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    axis00_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    axis00_TVALID : OUT STD_LOGIC;
    axis00_TREADY : IN STD_LOGIC;
    axis00_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    axis00_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of example_stream_plus1_512_512_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal call_ret_read_stream_512_512_s_fu_111_axis01_TDATA_blk_n : STD_LOGIC;
    signal axis01_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal call_ln100_write_stream_512_512_s_fu_98_axis00_TDATA_blk_n : STD_LOGIC;
    signal axis00_TDATA_blk_n : STD_LOGIC;
    signal call_ln100_write_stream_512_512_s_fu_98_ap_start : STD_LOGIC;
    signal call_ln100_write_stream_512_512_s_fu_98_ap_done : STD_LOGIC;
    signal call_ln100_write_stream_512_512_s_fu_98_ap_idle : STD_LOGIC;
    signal call_ln100_write_stream_512_512_s_fu_98_ap_ready : STD_LOGIC;
    signal call_ln100_write_stream_512_512_s_fu_98_acc_data_V_read : STD_LOGIC_VECTOR (511 downto 0);
    signal call_ln100_write_stream_512_512_s_fu_98_axis00_TDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal call_ln100_write_stream_512_512_s_fu_98_axis00_TVALID : STD_LOGIC;
    signal call_ln100_write_stream_512_512_s_fu_98_axis00_TREADY : STD_LOGIC;
    signal call_ln100_write_stream_512_512_s_fu_98_axis00_TKEEP : STD_LOGIC_VECTOR (63 downto 0);
    signal call_ln100_write_stream_512_512_s_fu_98_axis00_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal call_ln100_write_stream_512_512_s_fu_98_ap_ce : STD_LOGIC;
    signal ap_block_state3 : BOOLEAN;
    signal call_ret_read_stream_512_512_s_fu_111_ap_start : STD_LOGIC;
    signal call_ret_read_stream_512_512_s_fu_111_ap_done : STD_LOGIC;
    signal call_ret_read_stream_512_512_s_fu_111_ap_idle : STD_LOGIC;
    signal call_ret_read_stream_512_512_s_fu_111_ap_ready : STD_LOGIC;
    signal call_ret_read_stream_512_512_s_fu_111_axis01_TREADY : STD_LOGIC;
    signal call_ret_read_stream_512_512_s_fu_111_ap_return_0 : STD_LOGIC_VECTOR (511 downto 0);
    signal call_ret_read_stream_512_512_s_fu_111_ap_return_1 : STD_LOGIC_VECTOR (63 downto 0);
    signal call_ret_read_stream_512_512_s_fu_111_ap_return_2 : STD_LOGIC_VECTOR (0 downto 0);
    signal call_ret_read_stream_512_512_s_fu_111_ap_ce : STD_LOGIC;
    signal acc_last_V_fu_130_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln647_fu_135_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_1_i_fu_145_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_2_i_fu_161_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_3_i_fu_177_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_4_i_fu_193_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_5_i_fu_209_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_6_i_fu_225_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_7_i_fu_241_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_8_i_fu_257_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_9_i_fu_273_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_i_fu_289_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_10_i_fu_305_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_11_i_fu_321_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_12_i_fu_337_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_13_i_fu_353_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_14_i_fu_369_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_15_fu_379_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_14_fu_363_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_13_fu_347_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_12_fu_331_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_11_fu_315_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_10_fu_299_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_9_fu_283_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_8_fu_267_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_7_fu_251_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_6_fu_235_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_5_fu_219_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_4_fu_203_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_3_fu_187_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_2_fu_171_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_1_fu_155_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_fu_139_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component write_stream_512_512_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        acc_data_V_read : IN STD_LOGIC_VECTOR (511 downto 0);
        acc_keep_V_read : IN STD_LOGIC_VECTOR (63 downto 0);
        acc_last_V_read : IN STD_LOGIC_VECTOR (0 downto 0);
        axis00_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        axis00_TVALID : OUT STD_LOGIC;
        axis00_TREADY : IN STD_LOGIC;
        axis00_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
        axis00_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        axis00_TDATA_blk_n : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC );
    end component;


    component read_stream_512_512_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        axis01_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        axis01_TVALID : IN STD_LOGIC;
        axis01_TREADY : OUT STD_LOGIC;
        axis01_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
        axis01_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (511 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (0 downto 0);
        axis01_TDATA_blk_n : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC );
    end component;



begin
    call_ln100_write_stream_512_512_s_fu_98 : component write_stream_512_512_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => call_ln100_write_stream_512_512_s_fu_98_ap_start,
        ap_done => call_ln100_write_stream_512_512_s_fu_98_ap_done,
        ap_idle => call_ln100_write_stream_512_512_s_fu_98_ap_idle,
        ap_ready => call_ln100_write_stream_512_512_s_fu_98_ap_ready,
        acc_data_V_read => call_ln100_write_stream_512_512_s_fu_98_acc_data_V_read,
        acc_keep_V_read => call_ret_read_stream_512_512_s_fu_111_ap_return_1,
        acc_last_V_read => call_ret_read_stream_512_512_s_fu_111_ap_return_2,
        axis00_TDATA => call_ln100_write_stream_512_512_s_fu_98_axis00_TDATA,
        axis00_TVALID => call_ln100_write_stream_512_512_s_fu_98_axis00_TVALID,
        axis00_TREADY => call_ln100_write_stream_512_512_s_fu_98_axis00_TREADY,
        axis00_TKEEP => call_ln100_write_stream_512_512_s_fu_98_axis00_TKEEP,
        axis00_TLAST => call_ln100_write_stream_512_512_s_fu_98_axis00_TLAST,
        axis00_TDATA_blk_n => call_ln100_write_stream_512_512_s_fu_98_axis00_TDATA_blk_n,
        ap_ce => call_ln100_write_stream_512_512_s_fu_98_ap_ce);

    call_ret_read_stream_512_512_s_fu_111 : component read_stream_512_512_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => call_ret_read_stream_512_512_s_fu_111_ap_start,
        ap_done => call_ret_read_stream_512_512_s_fu_111_ap_done,
        ap_idle => call_ret_read_stream_512_512_s_fu_111_ap_idle,
        ap_ready => call_ret_read_stream_512_512_s_fu_111_ap_ready,
        axis01_TDATA => axis01_TDATA,
        axis01_TVALID => axis01_TVALID,
        axis01_TREADY => call_ret_read_stream_512_512_s_fu_111_axis01_TREADY,
        axis01_TKEEP => axis01_TKEEP,
        axis01_TLAST => axis01_TLAST,
        ap_return_0 => call_ret_read_stream_512_512_s_fu_111_ap_return_0,
        ap_return_1 => call_ret_read_stream_512_512_s_fu_111_ap_return_1,
        ap_return_2 => call_ret_read_stream_512_512_s_fu_111_ap_return_2,
        axis01_TDATA_blk_n => call_ret_read_stream_512_512_s_fu_111_axis01_TDATA_blk_n,
        ap_ce => call_ret_read_stream_512_512_s_fu_111_ap_ce);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, call_ret_read_stream_512_512_s_fu_111_axis01_TDATA_blk_n, ap_CS_fsm_state3, call_ln100_write_stream_512_512_s_fu_98_axis00_TDATA_blk_n, acc_last_V_fu_130_p1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if ((not(((call_ln100_write_stream_512_512_s_fu_98_axis00_TDATA_blk_n = ap_const_logic_0) or (call_ret_read_stream_512_512_s_fu_111_axis01_TDATA_blk_n = ap_const_logic_0))) and (ap_const_lv1_0 = acc_last_V_fu_130_p1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((call_ln100_write_stream_512_512_s_fu_98_axis00_TDATA_blk_n = ap_const_logic_0) or (call_ret_read_stream_512_512_s_fu_111_axis01_TDATA_blk_n = ap_const_logic_0))) and (ap_const_lv1_1 = acc_last_V_fu_130_p1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    acc_last_V_fu_130_p1 <= call_ret_read_stream_512_512_s_fu_111_ap_return_2;
    add_ln215_10_fu_299_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(p_Result_4_i_fu_289_p4));
    add_ln215_11_fu_315_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(p_Result_4_10_i_fu_305_p4));
    add_ln215_12_fu_331_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(p_Result_4_11_i_fu_321_p4));
    add_ln215_13_fu_347_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(p_Result_4_12_i_fu_337_p4));
    add_ln215_14_fu_363_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(p_Result_4_13_i_fu_353_p4));
    add_ln215_15_fu_379_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(p_Result_4_14_i_fu_369_p4));
    add_ln215_1_fu_155_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(p_Result_4_1_i_fu_145_p4));
    add_ln215_2_fu_171_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(p_Result_4_2_i_fu_161_p4));
    add_ln215_3_fu_187_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(p_Result_4_3_i_fu_177_p4));
    add_ln215_4_fu_203_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(p_Result_4_4_i_fu_193_p4));
    add_ln215_5_fu_219_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(p_Result_4_5_i_fu_209_p4));
    add_ln215_6_fu_235_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(p_Result_4_6_i_fu_225_p4));
    add_ln215_7_fu_251_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(p_Result_4_7_i_fu_241_p4));
    add_ln215_8_fu_267_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(p_Result_4_8_i_fu_257_p4));
    add_ln215_9_fu_283_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(p_Result_4_9_i_fu_273_p4));
    add_ln215_fu_139_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(trunc_ln647_fu_135_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state3_assign_proc : process(call_ret_read_stream_512_512_s_fu_111_axis01_TDATA_blk_n, call_ln100_write_stream_512_512_s_fu_98_axis00_TDATA_blk_n)
    begin
                ap_block_state3 <= ((call_ln100_write_stream_512_512_s_fu_98_axis00_TDATA_blk_n = ap_const_logic_0) or (call_ret_read_stream_512_512_s_fu_111_axis01_TDATA_blk_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    axis00_TDATA <= call_ln100_write_stream_512_512_s_fu_98_axis00_TDATA;

    axis00_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state3, call_ln100_write_stream_512_512_s_fu_98_axis00_TDATA_blk_n)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            axis00_TDATA_blk_n <= call_ln100_write_stream_512_512_s_fu_98_axis00_TDATA_blk_n;
        else 
            axis00_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    axis00_TKEEP <= call_ln100_write_stream_512_512_s_fu_98_axis00_TKEEP;
    axis00_TLAST <= call_ln100_write_stream_512_512_s_fu_98_axis00_TLAST;
    axis00_TVALID <= call_ln100_write_stream_512_512_s_fu_98_axis00_TVALID;

    axis01_TDATA_blk_n_assign_proc : process(call_ret_read_stream_512_512_s_fu_111_axis01_TDATA_blk_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            axis01_TDATA_blk_n <= call_ret_read_stream_512_512_s_fu_111_axis01_TDATA_blk_n;
        else 
            axis01_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    axis01_TREADY_assign_proc : process(ap_CS_fsm_state3, call_ret_read_stream_512_512_s_fu_111_axis01_TREADY)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            axis01_TREADY <= call_ret_read_stream_512_512_s_fu_111_axis01_TREADY;
        else 
            axis01_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    call_ln100_write_stream_512_512_s_fu_98_acc_data_V_read <= (((((((((((((((add_ln215_15_fu_379_p2 & add_ln215_14_fu_363_p2) & add_ln215_13_fu_347_p2) & add_ln215_12_fu_331_p2) & add_ln215_11_fu_315_p2) & add_ln215_10_fu_299_p2) & add_ln215_9_fu_283_p2) & add_ln215_8_fu_267_p2) & add_ln215_7_fu_251_p2) & add_ln215_6_fu_235_p2) & add_ln215_5_fu_219_p2) & add_ln215_4_fu_203_p2) & add_ln215_3_fu_187_p2) & add_ln215_2_fu_171_p2) & add_ln215_1_fu_155_p2) & add_ln215_fu_139_p2);

    call_ln100_write_stream_512_512_s_fu_98_ap_ce_assign_proc : process(call_ret_read_stream_512_512_s_fu_111_axis01_TDATA_blk_n, ap_CS_fsm_state3)
    begin
        if (((call_ret_read_stream_512_512_s_fu_111_axis01_TDATA_blk_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            call_ln100_write_stream_512_512_s_fu_98_ap_ce <= ap_const_logic_1;
        else 
            call_ln100_write_stream_512_512_s_fu_98_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    call_ln100_write_stream_512_512_s_fu_98_ap_start_assign_proc : process(call_ret_read_stream_512_512_s_fu_111_axis01_TDATA_blk_n, ap_CS_fsm_state3)
    begin
        if (((call_ret_read_stream_512_512_s_fu_111_axis01_TDATA_blk_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            call_ln100_write_stream_512_512_s_fu_98_ap_start <= ap_const_logic_1;
        else 
            call_ln100_write_stream_512_512_s_fu_98_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    call_ln100_write_stream_512_512_s_fu_98_axis00_TREADY <= (axis00_TREADY and ap_CS_fsm_state3);

    call_ret_read_stream_512_512_s_fu_111_ap_ce_assign_proc : process(ap_CS_fsm_state3, call_ln100_write_stream_512_512_s_fu_98_axis00_TDATA_blk_n)
    begin
        if (((call_ln100_write_stream_512_512_s_fu_98_axis00_TDATA_blk_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            call_ret_read_stream_512_512_s_fu_111_ap_ce <= ap_const_logic_1;
        else 
            call_ret_read_stream_512_512_s_fu_111_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    call_ret_read_stream_512_512_s_fu_111_ap_start_assign_proc : process(ap_CS_fsm_state3, call_ln100_write_stream_512_512_s_fu_98_axis00_TDATA_blk_n)
    begin
        if (((call_ln100_write_stream_512_512_s_fu_98_axis00_TDATA_blk_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            call_ret_read_stream_512_512_s_fu_111_ap_start <= ap_const_logic_1;
        else 
            call_ret_read_stream_512_512_s_fu_111_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_4_10_i_fu_305_p4 <= call_ret_read_stream_512_512_s_fu_111_ap_return_0(383 downto 352);
    p_Result_4_11_i_fu_321_p4 <= call_ret_read_stream_512_512_s_fu_111_ap_return_0(415 downto 384);
    p_Result_4_12_i_fu_337_p4 <= call_ret_read_stream_512_512_s_fu_111_ap_return_0(447 downto 416);
    p_Result_4_13_i_fu_353_p4 <= call_ret_read_stream_512_512_s_fu_111_ap_return_0(479 downto 448);
    p_Result_4_14_i_fu_369_p4 <= call_ret_read_stream_512_512_s_fu_111_ap_return_0(511 downto 480);
    p_Result_4_1_i_fu_145_p4 <= call_ret_read_stream_512_512_s_fu_111_ap_return_0(63 downto 32);
    p_Result_4_2_i_fu_161_p4 <= call_ret_read_stream_512_512_s_fu_111_ap_return_0(95 downto 64);
    p_Result_4_3_i_fu_177_p4 <= call_ret_read_stream_512_512_s_fu_111_ap_return_0(127 downto 96);
    p_Result_4_4_i_fu_193_p4 <= call_ret_read_stream_512_512_s_fu_111_ap_return_0(159 downto 128);
    p_Result_4_5_i_fu_209_p4 <= call_ret_read_stream_512_512_s_fu_111_ap_return_0(191 downto 160);
    p_Result_4_6_i_fu_225_p4 <= call_ret_read_stream_512_512_s_fu_111_ap_return_0(223 downto 192);
    p_Result_4_7_i_fu_241_p4 <= call_ret_read_stream_512_512_s_fu_111_ap_return_0(255 downto 224);
    p_Result_4_8_i_fu_257_p4 <= call_ret_read_stream_512_512_s_fu_111_ap_return_0(287 downto 256);
    p_Result_4_9_i_fu_273_p4 <= call_ret_read_stream_512_512_s_fu_111_ap_return_0(319 downto 288);
    p_Result_4_i_fu_289_p4 <= call_ret_read_stream_512_512_s_fu_111_ap_return_0(351 downto 320);
    trunc_ln647_fu_135_p1 <= call_ret_read_stream_512_512_s_fu_111_ap_return_0(32 - 1 downto 0);
end behav;
