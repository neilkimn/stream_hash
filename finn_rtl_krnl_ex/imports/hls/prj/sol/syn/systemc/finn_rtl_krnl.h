// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _finn_rtl_krnl_HH_
#define _finn_rtl_krnl_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "example_stream_plus1_512_512_s.h"
#include "finn_rtl_krnl_control_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_CONTROL_ADDR_WIDTH = 4,
         unsigned int C_S_AXI_CONTROL_DATA_WIDTH = 32>
struct finn_rtl_krnl : public sc_module {
    // Port declarations 29
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_lv<512> > axis00_TDATA;
    sc_out< sc_logic > axis00_TVALID;
    sc_in< sc_logic > axis00_TREADY;
    sc_out< sc_lv<64> > axis00_TKEEP;
    sc_out< sc_lv<1> > axis00_TLAST;
    sc_in< sc_lv<512> > axis01_TDATA;
    sc_in< sc_logic > axis01_TVALID;
    sc_out< sc_logic > axis01_TREADY;
    sc_in< sc_lv<64> > axis01_TKEEP;
    sc_in< sc_lv<1> > axis01_TLAST;
    sc_in< sc_logic > s_axi_control_AWVALID;
    sc_out< sc_logic > s_axi_control_AWREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_ADDR_WIDTH> > s_axi_control_AWADDR;
    sc_in< sc_logic > s_axi_control_WVALID;
    sc_out< sc_logic > s_axi_control_WREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_DATA_WIDTH> > s_axi_control_WDATA;
    sc_in< sc_uint<C_S_AXI_CONTROL_DATA_WIDTH/8> > s_axi_control_WSTRB;
    sc_in< sc_logic > s_axi_control_ARVALID;
    sc_out< sc_logic > s_axi_control_ARREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_ADDR_WIDTH> > s_axi_control_ARADDR;
    sc_out< sc_logic > s_axi_control_RVALID;
    sc_in< sc_logic > s_axi_control_RREADY;
    sc_out< sc_uint<C_S_AXI_CONTROL_DATA_WIDTH> > s_axi_control_RDATA;
    sc_out< sc_lv<2> > s_axi_control_RRESP;
    sc_out< sc_logic > s_axi_control_BVALID;
    sc_in< sc_logic > s_axi_control_BREADY;
    sc_out< sc_lv<2> > s_axi_control_BRESP;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    finn_rtl_krnl(sc_module_name name);
    SC_HAS_PROCESS(finn_rtl_krnl);

    ~finn_rtl_krnl();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    finn_rtl_krnl_control_s_axi<C_S_AXI_CONTROL_ADDR_WIDTH,C_S_AXI_CONTROL_DATA_WIDTH>* finn_rtl_krnl_control_s_axi_U;
    example_stream_plus1_512_512_s* grp_example_stream_plus1_512_512_s_fu_38;
    regslice_both<512>* regslice_both_axis00_V_data_V_U;
    regslice_both<64>* regslice_both_axis00_V_keep_V_U;
    regslice_both<1>* regslice_both_axis00_V_last_V_U;
    regslice_both<512>* regslice_both_axis01_V_data_V_U;
    regslice_both<64>* regslice_both_axis01_V_keep_V_U;
    regslice_both<1>* regslice_both_axis01_V_last_V_U;
    sc_signal< sc_logic > ap_rst_reg_2;
    sc_signal< sc_logic > ap_rst_reg_1;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > grp_example_stream_plus1_512_512_s_fu_38_ap_start;
    sc_signal< sc_logic > grp_example_stream_plus1_512_512_s_fu_38_ap_done;
    sc_signal< sc_logic > grp_example_stream_plus1_512_512_s_fu_38_ap_idle;
    sc_signal< sc_logic > grp_example_stream_plus1_512_512_s_fu_38_ap_ready;
    sc_signal< sc_logic > grp_example_stream_plus1_512_512_s_fu_38_axis01_TREADY;
    sc_signal< sc_lv<512> > grp_example_stream_plus1_512_512_s_fu_38_axis00_TDATA;
    sc_signal< sc_logic > grp_example_stream_plus1_512_512_s_fu_38_axis00_TVALID;
    sc_signal< sc_logic > grp_example_stream_plus1_512_512_s_fu_38_axis00_TREADY;
    sc_signal< sc_lv<64> > grp_example_stream_plus1_512_512_s_fu_38_axis00_TKEEP;
    sc_signal< sc_lv<1> > grp_example_stream_plus1_512_512_s_fu_38_axis00_TLAST;
    sc_signal< sc_logic > grp_example_stream_plus1_512_512_s_fu_38_ap_start_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > regslice_both_axis00_V_data_V_U_apdone_blk;
    sc_signal< sc_logic > axis00_TREADY_int;
    sc_signal< sc_logic > regslice_both_axis00_V_data_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_axis00_V_keep_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_axis00_V_keep_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_axis00_V_keep_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_axis00_V_last_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_axis00_V_last_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_axis00_V_last_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_axis01_V_data_V_U_apdone_blk;
    sc_signal< sc_lv<512> > axis01_TDATA_int;
    sc_signal< sc_logic > axis01_TVALID_int;
    sc_signal< sc_logic > axis01_TREADY_int;
    sc_signal< sc_logic > regslice_both_axis01_V_data_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_axis01_V_keep_V_U_apdone_blk;
    sc_signal< sc_lv<64> > axis01_TKEEP_int;
    sc_signal< sc_logic > regslice_both_axis01_V_keep_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_axis01_V_keep_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_axis01_V_last_V_U_apdone_blk;
    sc_signal< sc_lv<1> > axis01_TLAST_int;
    sc_signal< sc_logic > regslice_both_axis01_V_last_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_axis01_V_last_V_U_ack_in;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_axis00_TVALID();
    void thread_axis01_TREADY();
    void thread_axis01_TREADY_int();
    void thread_grp_example_stream_plus1_512_512_s_fu_38_ap_start();
    void thread_grp_example_stream_plus1_512_512_s_fu_38_axis00_TREADY();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
