// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "finn_rtl_krnl.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic finn_rtl_krnl::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic finn_rtl_krnl::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> finn_rtl_krnl::ap_ST_fsm_state1 = "1";
const sc_lv<4> finn_rtl_krnl::ap_ST_fsm_state2 = "10";
const sc_lv<4> finn_rtl_krnl::ap_ST_fsm_state3 = "100";
const sc_lv<4> finn_rtl_krnl::ap_ST_fsm_state4 = "1000";
const int finn_rtl_krnl::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> finn_rtl_krnl::ap_const_lv32_1 = "1";
const sc_lv<32> finn_rtl_krnl::ap_const_lv32_2 = "10";
const sc_lv<32> finn_rtl_krnl::ap_const_lv32_3 = "11";
const bool finn_rtl_krnl::ap_const_boolean_1 = true;

finn_rtl_krnl::finn_rtl_krnl(sc_module_name name) : sc_module(name), mVcdFile(0) {
    finn_rtl_krnl_control_s_axi_U = new finn_rtl_krnl_control_s_axi<C_S_AXI_CONTROL_ADDR_WIDTH,C_S_AXI_CONTROL_DATA_WIDTH>("finn_rtl_krnl_control_s_axi_U");
    finn_rtl_krnl_control_s_axi_U->AWVALID(s_axi_control_AWVALID);
    finn_rtl_krnl_control_s_axi_U->AWREADY(s_axi_control_AWREADY);
    finn_rtl_krnl_control_s_axi_U->AWADDR(s_axi_control_AWADDR);
    finn_rtl_krnl_control_s_axi_U->WVALID(s_axi_control_WVALID);
    finn_rtl_krnl_control_s_axi_U->WREADY(s_axi_control_WREADY);
    finn_rtl_krnl_control_s_axi_U->WDATA(s_axi_control_WDATA);
    finn_rtl_krnl_control_s_axi_U->WSTRB(s_axi_control_WSTRB);
    finn_rtl_krnl_control_s_axi_U->ARVALID(s_axi_control_ARVALID);
    finn_rtl_krnl_control_s_axi_U->ARREADY(s_axi_control_ARREADY);
    finn_rtl_krnl_control_s_axi_U->ARADDR(s_axi_control_ARADDR);
    finn_rtl_krnl_control_s_axi_U->RVALID(s_axi_control_RVALID);
    finn_rtl_krnl_control_s_axi_U->RREADY(s_axi_control_RREADY);
    finn_rtl_krnl_control_s_axi_U->RDATA(s_axi_control_RDATA);
    finn_rtl_krnl_control_s_axi_U->RRESP(s_axi_control_RRESP);
    finn_rtl_krnl_control_s_axi_U->BVALID(s_axi_control_BVALID);
    finn_rtl_krnl_control_s_axi_U->BREADY(s_axi_control_BREADY);
    finn_rtl_krnl_control_s_axi_U->BRESP(s_axi_control_BRESP);
    finn_rtl_krnl_control_s_axi_U->ACLK(ap_clk);
    finn_rtl_krnl_control_s_axi_U->ARESET(ap_rst_n_inv);
    finn_rtl_krnl_control_s_axi_U->ACLK_EN(ap_var_for_const0);
    grp_example_stream_plus1_512_512_s_fu_38 = new example_stream_plus1_512_512_s("grp_example_stream_plus1_512_512_s_fu_38");
    grp_example_stream_plus1_512_512_s_fu_38->ap_clk(ap_clk);
    grp_example_stream_plus1_512_512_s_fu_38->ap_rst(ap_rst_n_inv);
    grp_example_stream_plus1_512_512_s_fu_38->ap_start(grp_example_stream_plus1_512_512_s_fu_38_ap_start);
    grp_example_stream_plus1_512_512_s_fu_38->ap_done(grp_example_stream_plus1_512_512_s_fu_38_ap_done);
    grp_example_stream_plus1_512_512_s_fu_38->ap_idle(grp_example_stream_plus1_512_512_s_fu_38_ap_idle);
    grp_example_stream_plus1_512_512_s_fu_38->ap_ready(grp_example_stream_plus1_512_512_s_fu_38_ap_ready);
    grp_example_stream_plus1_512_512_s_fu_38->axis01_TDATA(axis01_TDATA_int);
    grp_example_stream_plus1_512_512_s_fu_38->axis01_TVALID(axis01_TVALID_int);
    grp_example_stream_plus1_512_512_s_fu_38->axis01_TREADY(grp_example_stream_plus1_512_512_s_fu_38_axis01_TREADY);
    grp_example_stream_plus1_512_512_s_fu_38->axis01_TKEEP(axis01_TKEEP_int);
    grp_example_stream_plus1_512_512_s_fu_38->axis01_TLAST(axis01_TLAST_int);
    grp_example_stream_plus1_512_512_s_fu_38->axis00_TDATA(grp_example_stream_plus1_512_512_s_fu_38_axis00_TDATA);
    grp_example_stream_plus1_512_512_s_fu_38->axis00_TVALID(grp_example_stream_plus1_512_512_s_fu_38_axis00_TVALID);
    grp_example_stream_plus1_512_512_s_fu_38->axis00_TREADY(grp_example_stream_plus1_512_512_s_fu_38_axis00_TREADY);
    grp_example_stream_plus1_512_512_s_fu_38->axis00_TKEEP(grp_example_stream_plus1_512_512_s_fu_38_axis00_TKEEP);
    grp_example_stream_plus1_512_512_s_fu_38->axis00_TLAST(grp_example_stream_plus1_512_512_s_fu_38_axis00_TLAST);
    regslice_both_axis00_V_data_V_U = new regslice_both<512>("regslice_both_axis00_V_data_V_U");
    regslice_both_axis00_V_data_V_U->ap_clk(ap_clk);
    regslice_both_axis00_V_data_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_axis00_V_data_V_U->data_in(grp_example_stream_plus1_512_512_s_fu_38_axis00_TDATA);
    regslice_both_axis00_V_data_V_U->vld_in(grp_example_stream_plus1_512_512_s_fu_38_axis00_TVALID);
    regslice_both_axis00_V_data_V_U->ack_in(axis00_TREADY_int);
    regslice_both_axis00_V_data_V_U->data_out(axis00_TDATA);
    regslice_both_axis00_V_data_V_U->vld_out(regslice_both_axis00_V_data_V_U_vld_out);
    regslice_both_axis00_V_data_V_U->ack_out(axis00_TREADY);
    regslice_both_axis00_V_data_V_U->apdone_blk(regslice_both_axis00_V_data_V_U_apdone_blk);
    regslice_both_axis00_V_keep_V_U = new regslice_both<64>("regslice_both_axis00_V_keep_V_U");
    regslice_both_axis00_V_keep_V_U->ap_clk(ap_clk);
    regslice_both_axis00_V_keep_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_axis00_V_keep_V_U->data_in(grp_example_stream_plus1_512_512_s_fu_38_axis00_TKEEP);
    regslice_both_axis00_V_keep_V_U->vld_in(grp_example_stream_plus1_512_512_s_fu_38_axis00_TVALID);
    regslice_both_axis00_V_keep_V_U->ack_in(regslice_both_axis00_V_keep_V_U_ack_in_dummy);
    regslice_both_axis00_V_keep_V_U->data_out(axis00_TKEEP);
    regslice_both_axis00_V_keep_V_U->vld_out(regslice_both_axis00_V_keep_V_U_vld_out);
    regslice_both_axis00_V_keep_V_U->ack_out(axis00_TREADY);
    regslice_both_axis00_V_keep_V_U->apdone_blk(regslice_both_axis00_V_keep_V_U_apdone_blk);
    regslice_both_axis00_V_last_V_U = new regslice_both<1>("regslice_both_axis00_V_last_V_U");
    regslice_both_axis00_V_last_V_U->ap_clk(ap_clk);
    regslice_both_axis00_V_last_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_axis00_V_last_V_U->data_in(grp_example_stream_plus1_512_512_s_fu_38_axis00_TLAST);
    regslice_both_axis00_V_last_V_U->vld_in(grp_example_stream_plus1_512_512_s_fu_38_axis00_TVALID);
    regslice_both_axis00_V_last_V_U->ack_in(regslice_both_axis00_V_last_V_U_ack_in_dummy);
    regslice_both_axis00_V_last_V_U->data_out(axis00_TLAST);
    regslice_both_axis00_V_last_V_U->vld_out(regslice_both_axis00_V_last_V_U_vld_out);
    regslice_both_axis00_V_last_V_U->ack_out(axis00_TREADY);
    regslice_both_axis00_V_last_V_U->apdone_blk(regslice_both_axis00_V_last_V_U_apdone_blk);
    regslice_both_axis01_V_data_V_U = new regslice_both<512>("regslice_both_axis01_V_data_V_U");
    regslice_both_axis01_V_data_V_U->ap_clk(ap_clk);
    regslice_both_axis01_V_data_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_axis01_V_data_V_U->data_in(axis01_TDATA);
    regslice_both_axis01_V_data_V_U->vld_in(axis01_TVALID);
    regslice_both_axis01_V_data_V_U->ack_in(regslice_both_axis01_V_data_V_U_ack_in);
    regslice_both_axis01_V_data_V_U->data_out(axis01_TDATA_int);
    regslice_both_axis01_V_data_V_U->vld_out(axis01_TVALID_int);
    regslice_both_axis01_V_data_V_U->ack_out(axis01_TREADY_int);
    regslice_both_axis01_V_data_V_U->apdone_blk(regslice_both_axis01_V_data_V_U_apdone_blk);
    regslice_both_axis01_V_keep_V_U = new regslice_both<64>("regslice_both_axis01_V_keep_V_U");
    regslice_both_axis01_V_keep_V_U->ap_clk(ap_clk);
    regslice_both_axis01_V_keep_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_axis01_V_keep_V_U->data_in(axis01_TKEEP);
    regslice_both_axis01_V_keep_V_U->vld_in(axis01_TVALID);
    regslice_both_axis01_V_keep_V_U->ack_in(regslice_both_axis01_V_keep_V_U_ack_in);
    regslice_both_axis01_V_keep_V_U->data_out(axis01_TKEEP_int);
    regslice_both_axis01_V_keep_V_U->vld_out(regslice_both_axis01_V_keep_V_U_vld_out);
    regslice_both_axis01_V_keep_V_U->ack_out(axis01_TREADY_int);
    regslice_both_axis01_V_keep_V_U->apdone_blk(regslice_both_axis01_V_keep_V_U_apdone_blk);
    regslice_both_axis01_V_last_V_U = new regslice_both<1>("regslice_both_axis01_V_last_V_U");
    regslice_both_axis01_V_last_V_U->ap_clk(ap_clk);
    regslice_both_axis01_V_last_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_axis01_V_last_V_U->data_in(axis01_TLAST);
    regslice_both_axis01_V_last_V_U->vld_in(axis01_TVALID);
    regslice_both_axis01_V_last_V_U->ack_in(regslice_both_axis01_V_last_V_U_ack_in);
    regslice_both_axis01_V_last_V_U->data_out(axis01_TLAST_int);
    regslice_both_axis01_V_last_V_U->vld_out(regslice_both_axis01_V_last_V_U_vld_out);
    regslice_both_axis01_V_last_V_U->ack_out(axis01_TREADY_int);
    regslice_both_axis01_V_last_V_U->apdone_blk(regslice_both_axis01_V_last_V_U_apdone_blk);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_axis00_TVALID);
    sensitive << ( regslice_both_axis00_V_data_V_U_vld_out );

    SC_METHOD(thread_axis01_TREADY);
    sensitive << ( axis01_TVALID );
    sensitive << ( regslice_both_axis01_V_data_V_U_ack_in );

    SC_METHOD(thread_axis01_TREADY_int);
    sensitive << ( grp_example_stream_plus1_512_512_s_fu_38_axis01_TREADY );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_grp_example_stream_plus1_512_512_s_fu_38_ap_start);
    sensitive << ( grp_example_stream_plus1_512_512_s_fu_38_ap_start_reg );

    SC_METHOD(thread_grp_example_stream_plus1_512_512_s_fu_38_axis00_TREADY);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( axis00_TREADY_int );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( grp_example_stream_plus1_512_512_s_fu_38_ap_done );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( regslice_both_axis00_V_data_V_U_apdone_blk );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_rst_reg_2 = SC_LOGIC_1;
    ap_rst_reg_1 = SC_LOGIC_1;
    ap_rst_n_inv = SC_LOGIC_1;
    grp_example_stream_plus1_512_512_s_fu_38_ap_start_reg = SC_LOGIC_0;
    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "finn_rtl_krnl_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, axis00_TDATA, "(port)axis00_TDATA");
    sc_trace(mVcdFile, axis00_TVALID, "(port)axis00_TVALID");
    sc_trace(mVcdFile, axis00_TREADY, "(port)axis00_TREADY");
    sc_trace(mVcdFile, axis00_TKEEP, "(port)axis00_TKEEP");
    sc_trace(mVcdFile, axis00_TLAST, "(port)axis00_TLAST");
    sc_trace(mVcdFile, axis01_TDATA, "(port)axis01_TDATA");
    sc_trace(mVcdFile, axis01_TVALID, "(port)axis01_TVALID");
    sc_trace(mVcdFile, axis01_TREADY, "(port)axis01_TREADY");
    sc_trace(mVcdFile, axis01_TKEEP, "(port)axis01_TKEEP");
    sc_trace(mVcdFile, axis01_TLAST, "(port)axis01_TLAST");
    sc_trace(mVcdFile, s_axi_control_AWVALID, "(port)s_axi_control_AWVALID");
    sc_trace(mVcdFile, s_axi_control_AWREADY, "(port)s_axi_control_AWREADY");
    sc_trace(mVcdFile, s_axi_control_AWADDR, "(port)s_axi_control_AWADDR");
    sc_trace(mVcdFile, s_axi_control_WVALID, "(port)s_axi_control_WVALID");
    sc_trace(mVcdFile, s_axi_control_WREADY, "(port)s_axi_control_WREADY");
    sc_trace(mVcdFile, s_axi_control_WDATA, "(port)s_axi_control_WDATA");
    sc_trace(mVcdFile, s_axi_control_WSTRB, "(port)s_axi_control_WSTRB");
    sc_trace(mVcdFile, s_axi_control_ARVALID, "(port)s_axi_control_ARVALID");
    sc_trace(mVcdFile, s_axi_control_ARREADY, "(port)s_axi_control_ARREADY");
    sc_trace(mVcdFile, s_axi_control_ARADDR, "(port)s_axi_control_ARADDR");
    sc_trace(mVcdFile, s_axi_control_RVALID, "(port)s_axi_control_RVALID");
    sc_trace(mVcdFile, s_axi_control_RREADY, "(port)s_axi_control_RREADY");
    sc_trace(mVcdFile, s_axi_control_RDATA, "(port)s_axi_control_RDATA");
    sc_trace(mVcdFile, s_axi_control_RRESP, "(port)s_axi_control_RRESP");
    sc_trace(mVcdFile, s_axi_control_BVALID, "(port)s_axi_control_BVALID");
    sc_trace(mVcdFile, s_axi_control_BREADY, "(port)s_axi_control_BREADY");
    sc_trace(mVcdFile, s_axi_control_BRESP, "(port)s_axi_control_BRESP");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_reg_2, "ap_rst_reg_2");
    sc_trace(mVcdFile, ap_rst_reg_1, "ap_rst_reg_1");
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, grp_example_stream_plus1_512_512_s_fu_38_ap_start, "grp_example_stream_plus1_512_512_s_fu_38_ap_start");
    sc_trace(mVcdFile, grp_example_stream_plus1_512_512_s_fu_38_ap_done, "grp_example_stream_plus1_512_512_s_fu_38_ap_done");
    sc_trace(mVcdFile, grp_example_stream_plus1_512_512_s_fu_38_ap_idle, "grp_example_stream_plus1_512_512_s_fu_38_ap_idle");
    sc_trace(mVcdFile, grp_example_stream_plus1_512_512_s_fu_38_ap_ready, "grp_example_stream_plus1_512_512_s_fu_38_ap_ready");
    sc_trace(mVcdFile, grp_example_stream_plus1_512_512_s_fu_38_axis01_TREADY, "grp_example_stream_plus1_512_512_s_fu_38_axis01_TREADY");
    sc_trace(mVcdFile, grp_example_stream_plus1_512_512_s_fu_38_axis00_TDATA, "grp_example_stream_plus1_512_512_s_fu_38_axis00_TDATA");
    sc_trace(mVcdFile, grp_example_stream_plus1_512_512_s_fu_38_axis00_TVALID, "grp_example_stream_plus1_512_512_s_fu_38_axis00_TVALID");
    sc_trace(mVcdFile, grp_example_stream_plus1_512_512_s_fu_38_axis00_TREADY, "grp_example_stream_plus1_512_512_s_fu_38_axis00_TREADY");
    sc_trace(mVcdFile, grp_example_stream_plus1_512_512_s_fu_38_axis00_TKEEP, "grp_example_stream_plus1_512_512_s_fu_38_axis00_TKEEP");
    sc_trace(mVcdFile, grp_example_stream_plus1_512_512_s_fu_38_axis00_TLAST, "grp_example_stream_plus1_512_512_s_fu_38_axis00_TLAST");
    sc_trace(mVcdFile, grp_example_stream_plus1_512_512_s_fu_38_ap_start_reg, "grp_example_stream_plus1_512_512_s_fu_38_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, regslice_both_axis00_V_data_V_U_apdone_blk, "regslice_both_axis00_V_data_V_U_apdone_blk");
    sc_trace(mVcdFile, axis00_TREADY_int, "axis00_TREADY_int");
    sc_trace(mVcdFile, regslice_both_axis00_V_data_V_U_vld_out, "regslice_both_axis00_V_data_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_axis00_V_keep_V_U_apdone_blk, "regslice_both_axis00_V_keep_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_axis00_V_keep_V_U_ack_in_dummy, "regslice_both_axis00_V_keep_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_axis00_V_keep_V_U_vld_out, "regslice_both_axis00_V_keep_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_axis00_V_last_V_U_apdone_blk, "regslice_both_axis00_V_last_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_axis00_V_last_V_U_ack_in_dummy, "regslice_both_axis00_V_last_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_axis00_V_last_V_U_vld_out, "regslice_both_axis00_V_last_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_axis01_V_data_V_U_apdone_blk, "regslice_both_axis01_V_data_V_U_apdone_blk");
    sc_trace(mVcdFile, axis01_TDATA_int, "axis01_TDATA_int");
    sc_trace(mVcdFile, axis01_TVALID_int, "axis01_TVALID_int");
    sc_trace(mVcdFile, axis01_TREADY_int, "axis01_TREADY_int");
    sc_trace(mVcdFile, regslice_both_axis01_V_data_V_U_ack_in, "regslice_both_axis01_V_data_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_axis01_V_keep_V_U_apdone_blk, "regslice_both_axis01_V_keep_V_U_apdone_blk");
    sc_trace(mVcdFile, axis01_TKEEP_int, "axis01_TKEEP_int");
    sc_trace(mVcdFile, regslice_both_axis01_V_keep_V_U_vld_out, "regslice_both_axis01_V_keep_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_axis01_V_keep_V_U_ack_in, "regslice_both_axis01_V_keep_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_axis01_V_last_V_U_apdone_blk, "regslice_both_axis01_V_last_V_U_apdone_blk");
    sc_trace(mVcdFile, axis01_TLAST_int, "axis01_TLAST_int");
    sc_trace(mVcdFile, regslice_both_axis01_V_last_V_U_vld_out, "regslice_both_axis01_V_last_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_axis01_V_last_V_U_ack_in, "regslice_both_axis01_V_last_V_U_ack_in");
#endif

    }
    mHdltvinHandle.open("finn_rtl_krnl.hdltvin.dat");
    mHdltvoutHandle.open("finn_rtl_krnl.hdltvout.dat");
}

finn_rtl_krnl::~finn_rtl_krnl() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete finn_rtl_krnl_control_s_axi_U;
    delete grp_example_stream_plus1_512_512_s_fu_38;
    delete regslice_both_axis00_V_data_V_U;
    delete regslice_both_axis00_V_keep_V_U;
    delete regslice_both_axis00_V_last_V_U;
    delete regslice_both_axis01_V_data_V_U;
    delete regslice_both_axis01_V_keep_V_U;
    delete regslice_both_axis01_V_last_V_U;
}

void finn_rtl_krnl::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void finn_rtl_krnl::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    ap_rst_n_inv = ap_rst_reg_1.read();
    ap_rst_reg_1 = ap_rst_reg_2.read();
    ap_rst_reg_2 =  (sc_logic) (~ap_rst_n.read());
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        grp_example_stream_plus1_512_512_s_fu_38_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            grp_example_stream_plus1_512_512_s_fu_38_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_example_stream_plus1_512_512_s_fu_38_ap_ready.read())) {
            grp_example_stream_plus1_512_512_s_fu_38_ap_start_reg = ap_const_logic_0;
        }
    }
}

void finn_rtl_krnl::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void finn_rtl_krnl::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void finn_rtl_krnl::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void finn_rtl_krnl::thread_axis00_TVALID() {
    axis00_TVALID = regslice_both_axis00_V_data_V_U_vld_out.read();
}

void finn_rtl_krnl::thread_axis01_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, axis01_TVALID.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_axis01_V_data_V_U_ack_in.read()))) {
        axis01_TREADY = ap_const_logic_1;
    } else {
        axis01_TREADY = ap_const_logic_0;
    }
}

void finn_rtl_krnl::thread_axis01_TREADY_int() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        axis01_TREADY_int = grp_example_stream_plus1_512_512_s_fu_38_axis01_TREADY.read();
    } else {
        axis01_TREADY_int = ap_const_logic_0;
    }
}

void finn_rtl_krnl::thread_grp_example_stream_plus1_512_512_s_fu_38_ap_start() {
    grp_example_stream_plus1_512_512_s_fu_38_ap_start = grp_example_stream_plus1_512_512_s_fu_38_ap_start_reg.read();
}

void finn_rtl_krnl::thread_grp_example_stream_plus1_512_512_s_fu_38_axis00_TREADY() {
    grp_example_stream_plus1_512_512_s_fu_38_axis00_TREADY = (ap_CS_fsm_state3.read() & axis00_TREADY_int.read());
}

void finn_rtl_krnl::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(grp_example_stream_plus1_512_512_s_fu_38_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(regslice_both_axis00_V_data_V_U_apdone_blk.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

void finn_rtl_krnl::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"axis00_TDATA\" :  \"" << axis00_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"axis00_TVALID\" :  \"" << axis00_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"axis00_TREADY\" :  \"" << axis00_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"axis00_TKEEP\" :  \"" << axis00_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"axis00_TLAST\" :  \"" << axis00_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"axis01_TDATA\" :  \"" << axis01_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"axis01_TVALID\" :  \"" << axis01_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"axis01_TREADY\" :  \"" << axis01_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"axis01_TKEEP\" :  \"" << axis01_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"axis01_TLAST\" :  \"" << axis01_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_AWVALID\" :  \"" << s_axi_control_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_AWREADY\" :  \"" << s_axi_control_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_AWADDR\" :  \"" << s_axi_control_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WVALID\" :  \"" << s_axi_control_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_WREADY\" :  \"" << s_axi_control_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WDATA\" :  \"" << s_axi_control_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WSTRB\" :  \"" << s_axi_control_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_ARVALID\" :  \"" << s_axi_control_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_ARREADY\" :  \"" << s_axi_control_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_ARADDR\" :  \"" << s_axi_control_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RVALID\" :  \"" << s_axi_control_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_RREADY\" :  \"" << s_axi_control_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RDATA\" :  \"" << s_axi_control_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RRESP\" :  \"" << s_axi_control_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_BVALID\" :  \"" << s_axi_control_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_BREADY\" :  \"" << s_axi_control_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_BRESP\" :  \"" << s_axi_control_BRESP.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

