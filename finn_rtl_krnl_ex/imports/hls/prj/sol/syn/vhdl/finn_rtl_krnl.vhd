-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity finn_rtl_krnl is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    axis00_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    axis00_TVALID : OUT STD_LOGIC;
    axis00_TREADY : IN STD_LOGIC;
    axis00_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    axis00_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    axis01_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    axis01_TVALID : IN STD_LOGIC;
    axis01_TREADY : OUT STD_LOGIC;
    axis01_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
    axis01_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of finn_rtl_krnl is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "finn_rtl_krnl,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.880000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=50,HLS_SYN_LUT=780,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal grp_example_stream_plus1_512_512_s_fu_38_ap_start : STD_LOGIC;
    signal grp_example_stream_plus1_512_512_s_fu_38_ap_done : STD_LOGIC;
    signal grp_example_stream_plus1_512_512_s_fu_38_ap_idle : STD_LOGIC;
    signal grp_example_stream_plus1_512_512_s_fu_38_ap_ready : STD_LOGIC;
    signal grp_example_stream_plus1_512_512_s_fu_38_axis01_TREADY : STD_LOGIC;
    signal grp_example_stream_plus1_512_512_s_fu_38_axis00_TDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_example_stream_plus1_512_512_s_fu_38_axis00_TVALID : STD_LOGIC;
    signal grp_example_stream_plus1_512_512_s_fu_38_axis00_TREADY : STD_LOGIC;
    signal grp_example_stream_plus1_512_512_s_fu_38_axis00_TKEEP : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_example_stream_plus1_512_512_s_fu_38_axis00_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_example_stream_plus1_512_512_s_fu_38_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal regslice_both_axis00_V_data_V_U_apdone_blk : STD_LOGIC;
    signal axis00_TREADY_int : STD_LOGIC;
    signal regslice_both_axis00_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_axis00_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_axis00_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_axis00_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_axis00_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_axis00_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_axis00_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_axis01_V_data_V_U_apdone_blk : STD_LOGIC;
    signal axis01_TDATA_int : STD_LOGIC_VECTOR (511 downto 0);
    signal axis01_TVALID_int : STD_LOGIC;
    signal axis01_TREADY_int : STD_LOGIC;
    signal regslice_both_axis01_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_axis01_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal axis01_TKEEP_int : STD_LOGIC_VECTOR (63 downto 0);
    signal regslice_both_axis01_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_axis01_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_axis01_V_last_V_U_apdone_blk : STD_LOGIC;
    signal axis01_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_axis01_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_axis01_V_last_V_U_ack_in : STD_LOGIC;

    component example_stream_plus1_512_512_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        axis01_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        axis01_TVALID : IN STD_LOGIC;
        axis01_TREADY : OUT STD_LOGIC;
        axis01_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
        axis01_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        axis00_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        axis00_TVALID : OUT STD_LOGIC;
        axis00_TREADY : IN STD_LOGIC;
        axis00_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
        axis00_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component finn_rtl_krnl_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    finn_rtl_krnl_control_s_axi_U : component finn_rtl_krnl_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1);

    grp_example_stream_plus1_512_512_s_fu_38 : component example_stream_plus1_512_512_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_example_stream_plus1_512_512_s_fu_38_ap_start,
        ap_done => grp_example_stream_plus1_512_512_s_fu_38_ap_done,
        ap_idle => grp_example_stream_plus1_512_512_s_fu_38_ap_idle,
        ap_ready => grp_example_stream_plus1_512_512_s_fu_38_ap_ready,
        axis01_TDATA => axis01_TDATA_int,
        axis01_TVALID => axis01_TVALID_int,
        axis01_TREADY => grp_example_stream_plus1_512_512_s_fu_38_axis01_TREADY,
        axis01_TKEEP => axis01_TKEEP_int,
        axis01_TLAST => axis01_TLAST_int,
        axis00_TDATA => grp_example_stream_plus1_512_512_s_fu_38_axis00_TDATA,
        axis00_TVALID => grp_example_stream_plus1_512_512_s_fu_38_axis00_TVALID,
        axis00_TREADY => grp_example_stream_plus1_512_512_s_fu_38_axis00_TREADY,
        axis00_TKEEP => grp_example_stream_plus1_512_512_s_fu_38_axis00_TKEEP,
        axis00_TLAST => grp_example_stream_plus1_512_512_s_fu_38_axis00_TLAST);

    regslice_both_axis00_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 512)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_example_stream_plus1_512_512_s_fu_38_axis00_TDATA,
        vld_in => grp_example_stream_plus1_512_512_s_fu_38_axis00_TVALID,
        ack_in => axis00_TREADY_int,
        data_out => axis00_TDATA,
        vld_out => regslice_both_axis00_V_data_V_U_vld_out,
        ack_out => axis00_TREADY,
        apdone_blk => regslice_both_axis00_V_data_V_U_apdone_blk);

    regslice_both_axis00_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_example_stream_plus1_512_512_s_fu_38_axis00_TKEEP,
        vld_in => grp_example_stream_plus1_512_512_s_fu_38_axis00_TVALID,
        ack_in => regslice_both_axis00_V_keep_V_U_ack_in_dummy,
        data_out => axis00_TKEEP,
        vld_out => regslice_both_axis00_V_keep_V_U_vld_out,
        ack_out => axis00_TREADY,
        apdone_blk => regslice_both_axis00_V_keep_V_U_apdone_blk);

    regslice_both_axis00_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_example_stream_plus1_512_512_s_fu_38_axis00_TLAST,
        vld_in => grp_example_stream_plus1_512_512_s_fu_38_axis00_TVALID,
        ack_in => regslice_both_axis00_V_last_V_U_ack_in_dummy,
        data_out => axis00_TLAST,
        vld_out => regslice_both_axis00_V_last_V_U_vld_out,
        ack_out => axis00_TREADY,
        apdone_blk => regslice_both_axis00_V_last_V_U_apdone_blk);

    regslice_both_axis01_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 512)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => axis01_TDATA,
        vld_in => axis01_TVALID,
        ack_in => regslice_both_axis01_V_data_V_U_ack_in,
        data_out => axis01_TDATA_int,
        vld_out => axis01_TVALID_int,
        ack_out => axis01_TREADY_int,
        apdone_blk => regslice_both_axis01_V_data_V_U_apdone_blk);

    regslice_both_axis01_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => axis01_TKEEP,
        vld_in => axis01_TVALID,
        ack_in => regslice_both_axis01_V_keep_V_U_ack_in,
        data_out => axis01_TKEEP_int,
        vld_out => regslice_both_axis01_V_keep_V_U_vld_out,
        ack_out => axis01_TREADY_int,
        apdone_blk => regslice_both_axis01_V_keep_V_U_apdone_blk);

    regslice_both_axis01_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => axis01_TLAST,
        vld_in => axis01_TVALID,
        ack_in => regslice_both_axis01_V_last_V_U_ack_in,
        data_out => axis01_TLAST_int,
        vld_out => regslice_both_axis01_V_last_V_U_vld_out,
        ack_out => axis01_TREADY_int,
        apdone_blk => regslice_both_axis01_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_example_stream_plus1_512_512_s_fu_38_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_example_stream_plus1_512_512_s_fu_38_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_example_stream_plus1_512_512_s_fu_38_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_example_stream_plus1_512_512_s_fu_38_ap_ready = ap_const_logic_1)) then 
                    grp_example_stream_plus1_512_512_s_fu_38_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (grp_example_stream_plus1_512_512_s_fu_38_ap_done, ap_CS_fsm, ap_CS_fsm_state3, ap_CS_fsm_state4, regslice_both_axis00_V_data_V_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_example_stream_plus1_512_512_s_fu_38_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (regslice_both_axis00_V_data_V_U_apdone_blk = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    axis00_TVALID <= regslice_both_axis00_V_data_V_U_vld_out;

    axis01_TREADY_assign_proc : process(axis01_TVALID, regslice_both_axis01_V_data_V_U_ack_in)
    begin
        if (((axis01_TVALID = ap_const_logic_1) and (regslice_both_axis01_V_data_V_U_ack_in = ap_const_logic_1))) then 
            axis01_TREADY <= ap_const_logic_1;
        else 
            axis01_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    axis01_TREADY_int_assign_proc : process(grp_example_stream_plus1_512_512_s_fu_38_axis01_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            axis01_TREADY_int <= grp_example_stream_plus1_512_512_s_fu_38_axis01_TREADY;
        else 
            axis01_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    grp_example_stream_plus1_512_512_s_fu_38_ap_start <= grp_example_stream_plus1_512_512_s_fu_38_ap_start_reg;
    grp_example_stream_plus1_512_512_s_fu_38_axis00_TREADY <= (axis00_TREADY_int and ap_CS_fsm_state3);
end behav;
